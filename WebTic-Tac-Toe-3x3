<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            background-color: #1a1a1d; /* тъмен фон за контраст с неоновите цветове */
            color: white;
            font-family: 'Arial', sans-serif;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 15px;
            margin: 20px auto;
            justify-content: center;
        }

        .cell {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100px;
            height: 100px;
            background-color: #0e0b16;
            color: #fff;
            font-size: 48px;
            font-weight: bold;
            border: 2px solid transparent;
            cursor: pointer;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
        }

        .cell:hover {
            background-color: #c3073f;
            box-shadow: 0 0 40px rgba(255, 0, 102, 0.7);
        }

        .cell.win {
            background-color: #6f2232;
            box-shadow: 0 0 40px rgba(255, 0, 102, 0.9);
        }

        .status {
            text-align: center;
            font-size: 24px;
            margin-top: 20px;
            color: #fff;
            text-shadow: 0 0 10px #fff;
        }

        .restart-btn {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            font-size: 18px;
            background-color: #1a1a1d;
            color: #fff;
            border: 2px solid #c3073f;
            cursor: pointer;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 0 20px rgba(195, 7, 63, 0.6);
        }

        .restart-btn:hover {
            background-color: #c3073f;
            box-shadow: 0 0 40px rgba(195, 7, 63, 0.8);
        }

        .player-input {
            text-align: center;
            margin: 20px 0;
        }

        .player-input input {
            padding: 10px;
            font-size: 16px;
            margin: 5px;
            border-radius: 5px;
            border: 2px solid #c3073f;
            background-color: #1a1a1d;
            color: white;
        }
    </style>
</head>
<body>

    <div class="player-input">
        <label for="playerX">Player X Name: </label>
        <input type="text" id="playerX" placeholder="Enter Player X Name">
        <br>
        <label for="playerO">Player O Name: </label>
        <input type="text" id="playerO" placeholder="Enter Player O Name">
        <br>
        <button class="restart-btn" id="startButton">Start Game</button>
    </div>

    <div class="status" id="status" style="display: none;">Player X's turn</div>
    <div class="board" id="board" style="display: none;">
        <div class="cell" data-cell-index="0"></div>
        <div class="cell" data-cell-index="1"></div>
        <div class="cell" data-cell-index="2"></div>
        <div class="cell" data-cell-index="3"></div>
        <div class="cell" data-cell-index="4"></div>
        <div class="cell" data-cell-index="5"></div>
        <div class="cell" data-cell-index="6"></div>
        <div class="cell" data-cell-index="7"></div>
        <div class="cell" data-cell-index="8"></div>
    </div>

    <button class="restart-btn" id="restartButton" style="display: none;">New Game</button>

    <script>
        const playerXInput = document.getElementById('playerX');
        const playerOInput = document.getElementById('playerO');
        const statusDisplay = document.getElementById('status');
        const board = document.getElementById('board');
        const cells = document.querySelectorAll('.cell');
        const restartButton = document.getElementById('restartButton');
        const startButton = document.getElementById('startButton');
        let gameActive = true;
        let currentPlayer = "X";
        let gameState = ["", "", "", "", "", "", "", "", ""];
        let playerXName = "Player X";
        let playerOName = "Player O";

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        startButton.addEventListener('click', () => {
            playerXName = playerXInput.value || "Player X";
            playerOName = playerOInput.value || "Player O";
            statusDisplay.textContent = `${playerXName}'s turn`;
            statusDisplay.style.display = 'block';
            board.style.display = 'grid';
            restartButton.style.display = 'block';
            startButton.style.display = 'none';
            document.querySelector('.player-input').style.display = 'none';
        });

        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

            if (gameState[clickedCellIndex] !== "" || !gameActive) {
                return;
            }

            gameState[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;
            
            checkForWinner();
        }

        function checkForWinner() {
            let roundWon = false;

            for (let i = 0; i < winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                let a = gameState[winCondition[0]];
                let b = gameState[winCondition[1]];
                let c = gameState[winCondition[2]];

                if (a === '' || b === '' || c === '') {
                    continue;
                }
                if (a === b && b === c) {
                    roundWon = true;
                    cells[winCondition[0]].classList.add('win');
                    cells[winCondition[1]].classList.add('win');
                    cells[winCondition[2]].classList.add('win');
                    break;
                }
            }

            if (roundWon) {
                statusDisplay.textContent = `${currentPlayer === "X" ? playerXName : playerOName} wins!`;
                gameActive = false;
                return;
            }

            if (!gameState.includes("")) {
                statusDisplay.textContent = "It's a draw!";
                gameActive = false;
                return;
            }

            currentPlayer = currentPlayer === "X" ? "O" : "X";
            statusDisplay.textContent = `${currentPlayer === "X" ? playerXName : playerOName}'s turn`;
        }

        function restartGame() {
            gameActive = true;
            currentPlayer = "X";
            gameState = ["", "", "", "", "", "", "", "", ""];
            statusDisplay.textContent = `${playerXName}'s turn`;
            cells.forEach(cell => {
                cell.textContent = "";
                cell.classList.remove('win');
            });
        }

        cells.forEach(cell => cell.addEventListener('click', handleCellClick));
        restartButton.addEventListener('click', restartGame);
    </script>

</body>
</html>
